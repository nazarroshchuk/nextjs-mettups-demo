{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nazarroshchuk/Desktop/Udemy_Maxilian_course/section_23_NextJS-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport { DATA_BASE_URL } from \"../../services/URL_data_base\";\nimport { getMeetupsStaticPaths } from \"../../services/getMeetupsStaticPaths\";\n\nconst MeetupDetails = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  const meetups = await getMeetupsStaticPaths();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  //fetch data for a single meetup\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(DATA_BASE_URL);\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/nazarroshchuk/Desktop/Udemy_Maxilian_course/section_23_NextJS-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","ObjectId","DATA_BASE_URL","getMeetupsStaticPaths","MeetupDetails","props","meetupData","image","title","address","description","getStaticPaths","meetups","fallback","paths","map","meetup","params","meetupId","_id","toString","getStaticProps","context","client","connect","db","meetupsCollection","collection","selectedMeetup","findOne","close","id"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,SAAQC,qBAAR,QAAoC,sCAApC;;AAIA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC7B,sBACI,QAAC,YAAD;AACI,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD5B;AAEI,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF5B;AAGI,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH9B;AAII,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJlC;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CATD;;AAWA,OAAO,eAAeC,cAAf,GAAgC;AAEnC,QAAMC,OAAO,GAAG,MAAMT,qBAAqB,EAA3C;AAEA,SAAO;AACHU,IAAAA,QAAQ,EAAE,KADP;AAEHC,IAAAA,KAAK,EAAEF,OAAO,CAACG,GAAR,CAAaC,MAAD,KAAa;AAC5BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACG,GAAP,CAAWC,QAAX;AAAZ;AADoB,KAAb,CAAZ;AAFJ,GAAP;AAMH;AAED,OAAO,eAAgBC,cAAhB,CAA+BC,OAA/B,EAAwC;AAC3C;AACA,QAAMJ,QAAQ,GAAGI,OAAO,CAACL,MAAR,CAAeC,QAAhC;AAEA,QAAMK,MAAM,GAAG,MAAMvB,WAAW,CAACwB,OAAZ,CAAoBtB,aAApB,CAArB;AACA,QAAMuB,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,cAAc,GAAG,MAAMF,iBAAiB,CAACG,OAAlB,CAA0B;AAAEV,IAAAA,GAAG,EAAElB,QAAQ,CAACiB,QAAD;AAAf,GAA1B,CAA7B;AAEAK,EAAAA,MAAM,CAACO,KAAP;AAEA,SAAO;AACHzB,IAAAA,KAAK,EAAE;AACHC,MAAAA,UAAU,EAAE;AACRyB,QAAAA,EAAE,EAAEH,cAAc,CAACT,GAAf,CAAmBC,QAAnB,EADI;AAERZ,QAAAA,KAAK,EAAEoB,cAAc,CAACpB,KAFd;AAGRC,QAAAA,OAAO,EAAEmB,cAAc,CAACnB,OAHhB;AAIRF,QAAAA,KAAK,EAAEqB,cAAc,CAACrB,KAJd;AAKRG,QAAAA,WAAW,EAAEkB,cAAc,CAAClB;AALpB;AADT;AADJ,GAAP;AAWH;AAED,eAAeN,aAAf","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport { DATA_BASE_URL } from \"../../services/URL_data_base\";\nimport {getMeetupsStaticPaths} from \"../../services/getMeetupsStaticPaths\";\n\n\n\nconst MeetupDetails = (props) => {\n    return (\n        <MeetupDetail\n            image={props.meetupData.image}\n            title={props.meetupData.title}\n            address={props.meetupData.address}\n            description={props.meetupData.description}\n        />\n    )\n}\n\nexport async function getStaticPaths() {\n\n    const meetups = await getMeetupsStaticPaths();\n\n    return {\n        fallback: false,\n        paths: meetups.map((meetup) => ({\n            params: { meetupId: meetup._id.toString() },\n        })),\n    };\n}\n\nexport async  function getStaticProps(context) {\n    //fetch data for a single meetup\n    const meetupId = context.params.meetupId;\n\n    const client = await MongoClient.connect(DATA_BASE_URL);\n    const db = client.db();\n\n    const meetupsCollection = db.collection('meetups');\n\n    const selectedMeetup = await meetupsCollection.findOne({ _id: ObjectId(meetupId) });\n\n    client.close();\n\n    return {\n        props: {\n            meetupData: {\n                id: selectedMeetup._id.toString(),\n                title: selectedMeetup.title,\n                address: selectedMeetup.address,\n                image: selectedMeetup.image,\n                description: selectedMeetup.description,\n            }\n        }\n    }\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}